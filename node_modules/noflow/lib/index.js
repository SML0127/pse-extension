"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var flow_1 = require("./flow");
var http = require("http");
var promisify = require("yaku/lib/promisify");
var Routes = (function (_super) {
    __extends(Routes, _super);
    function Routes() {
        var _this = _super.call(this) || this;
        _this.server = http.createServer(flow_1.default(_this));
        _this.listen = promisify(_this.server.listen, _this.server);
        _this.address = _this.server.address.bind(_this.server);
        _this.close = promisify(_this.server.close, _this.server);
        return _this;
    }
    return Routes;
}(Array));
exports.Routes = Routes;
;
/**
 * Create an array instance with some handy server helper methods.
 * @param FlowArray middlewares Optional. If not provided, the return type will be
 * a FlowArray, else a middleware Function.
 * @return FlowArray | Function
 * @example
 * ```js
 * import flow from "noflow"
 * let app = flow();
 * app.push("OK");
 * app.listen(8123).then(() => console.log("started"));
 * ```
 */
var flow = function () {
    if (arguments.length > 0) {
        return flow_1.default.apply(0, arguments);
    }
    var routes = new Routes();
    return routes;
};
exports.default = flow;
